type RegisteredInfo @model @auth(rules: [{allow: public}]) {
  id: ID!
  userId: String!
  livingSituation: String
  mobility: String
  diagnosis: String
  diagnosisDate: String
  patientName: String
  caregiverName: String
  caregiverRelationship: String

}

type PatientWatchData @model {
  time: AWSDateTime! @primaryKey
  patientId: ID! @index(name: "getDataByPatient", sortKeyFields: ["createdAt"], queryField: "getDataByPatient")
  steps: Int
  calories: Int
  heart_rate: Int
  respiratoryRate: Int
  oxygenSaturation: Int
  createdAt: String!

}

type Tip {
  message: String
  importance: Int
  link: String
}

type PatientTip {
  lifestyleTip: Tip
  sleepTip: Tip
  hrTip: Tip
  respiratoryTip: Tip
  generalTip: Tip
}


type PatientWatchData @model @auth(rules: [{allow: public}]) {
  id: ID! @primaryKey(sortKeyFields: ["time"])
  time: AWSDateTime!
  steps: Int
  calories: Int
  heartRate: Int
  respiratoryRate: Int
  oxygenSaturation: Int
}


type PatientAgitation @model @auth(rules: [{allow: public}]) {
  id: ID! @primaryKey(sortKeyFields: ["time"])
  time: AWSDateTime!
}


type PatientTips @model @auth(rules: [{allow: public}]) {
  id: ID! @primaryKey
  tips: PatientTip
}


type UserInfo @model @auth(rules: [{allow: public}]) {
  id: ID!
  username: String
  email: String
  patientName: String
  caregiverName: String
  hasWatchSetup: Boolean
  hasPatientInfo: Boolean
}

enum GeoFenceRadius {
  FT_50
  FT_100
  FT_200
}
 
type GeoFence @model @auth(rules: [{allow: public}])
 {
  id: ID!
  lon: Float
  lat:  Float
  radius: GeoFenceRadius
}